expr    	: KEYWORD:let IDENTIFIER EQ expr
			: TT_IDENTIFIER EQ expr # Update variable
			: condition

condition	: comp-expr ((KEYWORD:and|or) comp-expr)*

comp-expr	: (KEYWORD:not)* comp-expr
			: arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

arith-expr	: term ((ADD | SUB) term)*

term    	: unary ((MUL | DIV | MOD) unary)*


power		: factor (POW unary)*

call		: factor (LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN)?

factor  	: INT | FLOAT | IDENTIFIER
			: (PLUS|MINUS)* factor
			: LPAREN expr RPAREN
			: if-expr
			: while-loop
			: func

if-expr		: KEYWORD:if LPAREN condition RPAREN RCURLY expr
			: (KEYWORD:elif condition KEYWORD:then expr)*
			: (KEYWORD:else expr)? LCURLY

while-loop	: KEYWORD:while LPAREN condition RPAREN LCURLY expr RCURLY

for-loop	: KEYWORD:for LPAREN expr COMMA arith-expr
			 (COMMA arit-expr)? RPAREN LCURLY expr RCURLY

func		: KEYWORD:func IDENTIFIER?
			  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
			  ARROW expr